name: Pull Request Validation

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Skip if draft PR
  check-draft:
    name: Check if Draft PR
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.check.outputs.is-draft }}
    steps:
    - name: Check if PR is draft
      id: check
      run: |
        if [ "${{ github.event.pull_request.draft }}" == "true" ]; then
          echo "is-draft=true" >> $GITHUB_OUTPUT
        else
          echo "is-draft=false" >> $GITHUB_OUTPUT
        fi

  # Validate PR title and description
  validate-pr:
    name: Validate PR Format
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          chore
          ci
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          The subject "{subject}" found in the pull request title "{title}"
          didn't match the configured pattern. Please ensure that the subject
          doesn't start with an uppercase character.
    
    - name: Check PR description
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          if (!pullRequest.body || pullRequest.body.trim().length < 10) {
            core.setFailed('PR description is too short. Please provide a meaningful description.');
          }

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: [check-draft, validate-pr]
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
    
    - name: Check code formatting
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Lint code
      run: |
        flake8 . --count --statistics
    
    - name: Type checking
      run: |
        mypy . --ignore-missing-imports
    
    - name: Security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Test with multiple Python versions
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: [check-draft, validate-pr]
    if: needs.check-draft.outputs.is-draft == 'false'
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        django-version: ['4.2', '5.0']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_educore_lms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install pytest-django coverage
    
    - name: Run tests
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_educore_lms
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 0
      run: |
        python manage.py collectstatic --noinput
        coverage run --source='.' manage.py test
        coverage report

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [check-draft, validate-pr]
    if: needs.check-draft.outputs.is-draft == 'false'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_educore_lms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run performance tests
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_educore_lms
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 0
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
        # Add locust performance tests here
        echo "Performance tests would run here"

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [check-draft, validate-pr]
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: educore-lms:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Dependency check
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: [check-draft, validate-pr]
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  # Final status check
  pr-ready:
    name: PR Ready for Review
    runs-on: ubuntu-latest
    needs: [validate-pr, code-quality, test-matrix, performance, docker-build, dependency-review]
    if: always() && needs.check-draft.outputs.is-draft == 'false'
    
    steps:
    - name: Check all jobs status
      run: |
        if [ "${{ needs.validate-pr.result }}" != "success" ] || 
           [ "${{ needs.code-quality.result }}" != "success" ] || 
           [ "${{ needs.test-matrix.result }}" != "success" ] || 
           [ "${{ needs.docker-build.result }}" != "success" ] || 
           [ "${{ needs.dependency-review.result }}" != "success" ]; then
          echo "❌ Some checks failed. Please review and fix the issues."
          exit 1
        else
          echo "✅ All checks passed! PR is ready for review."
        fi
    
    - name: Comment on PR
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ All automated checks have passed! This PR is ready for manual review.'
          })