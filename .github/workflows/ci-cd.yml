name: EduCore LMS CI/CD Pipeline

on:
  push:
    branches:
      - main
      - qa
      - stagingTest
      - staging
      - releaseTest
      - release
      - 'feature/*'
      - 'hotfix/*'
      - 'enhancement/*'
      - 'bugfix/*'
  pull_request:
    branches:
      - main
      - qa
      - staging
      - release
      - 'feature/*'
      - 'hotfix/*'
      - 'enhancement/*'
      - 'bugfix/*'
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_educore_lms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest-django coverage
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Django tests
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_educore_lms
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 0
      run: |
        python manage.py collectstatic --noinput
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Determine Environment and Docker Tag
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
    
    steps:
    - name: Determine environment and docker tag
      id: env
      run: |
        if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "release" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "docker_tag=latest" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "staging" || "${{ github.ref_name }}" == "releaseTest" ]]; then
          echo "environment=uat" >> $GITHUB_OUTPUT
          echo "docker_tag=uat" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "stagingTest" ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          echo "docker_tag=qa" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "qa" ]]; then
          echo "environment=sandbox" >> $GITHUB_OUTPUT
          echo "docker_tag=sandbox" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == feature/* ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          echo "docker_tag=feature-$(echo ${{ github.ref_name }} | sed 's/feature\///')" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == hotfix/* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "docker_tag=hotfix-$(echo ${{ github.ref_name }} | sed 's/hotfix\///')" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == enhancement/* ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          echo "docker_tag=enhancement-$(echo ${{ github.ref_name }} | sed 's/enhancement\///')" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == bugfix/* ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          echo "docker_tag=bugfix-$(echo ${{ github.ref_name }} | sed 's/bugfix\///')" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "docker_tag=dev" >> $GITHUB_OUTPUT
        fi

  # Deploy to Sandbox (qa branch only)
  deploy-sandbox:
    name: Deploy to Sandbox
    runs-on: ubuntu-latest
    needs: [build, determine-environment]
    if: needs.determine-environment.outputs.environment == 'sandbox'
    environment:
      name: sandbox
      url: http://sandbox.educore-lms.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Pre-deployment Health Check
      run: |
        echo "🔍 Performing pre-deployment health check..."
        # Check if previous deployment is healthy
        curl -f http://sandbox.educore-lms.com/health/ || echo "Previous deployment not accessible"
    
    - name: Deploy to Sandbox
      run: |
        echo "🚀 Deploying to Sandbox environment..."
        echo "Using docker tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        
        # Pull latest images
        docker-compose -f docker-compose.sandbox.yml pull
        
        # Stop existing containers
        docker-compose -f docker-compose.sandbox.yml down
        
        # Deploy new version
        export DOCKER_TAG=${{ needs.determine-environment.outputs.docker_tag }}
        docker-compose -f docker-compose.sandbox.yml up -d
        
        # Wait for containers to be ready
        sleep 30
    
    - name: Database Migration
      run: |
        echo "📊 Running database migrations..."
        docker-compose -f docker-compose.sandbox.yml exec -T web python manage.py migrate --noinput
    
    - name: Collect Static Files
      run: |
        echo "📁 Collecting static files..."
        docker-compose -f docker-compose.sandbox.yml exec -T web python manage.py collectstatic --noinput
    
    - name: Health Check
      run: |
        echo "🏥 Performing post-deployment health check..."
        for i in {1..10}; do
          if curl -f http://sandbox.educore-lms.com/health/; then
            echo "✅ Sandbox deployment successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "❌ Health check failed after 10 attempts"
        exit 1
    
    - name: Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Sandbox deployment completed successfully"
          echo "🔗 URL: http://sandbox.educore-lms.com"
          echo "🏷️ Tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        else
          echo "❌ Sandbox deployment failed"
        fi

  # Deploy to QA (stagingTest branch, feature/* branches, enhancement/* branches, and bugfix/* branches)
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [build, determine-environment]
    if: needs.determine-environment.outputs.environment == 'qa'
    environment:
      name: qa
      url: http://qa.educore-lms.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Pre-deployment Health Check
      run: |
        echo "🔍 Performing pre-deployment health check..."
        # Check if previous deployment is healthy
        curl -f http://qa.educore-lms.com/health/ || echo "Previous deployment not accessible"
    
    - name: Deploy to QA
      run: |
        echo "🚀 Deploying to QA environment..."
        echo "Using docker tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        
        # Pull latest images
        docker-compose -f docker-compose.qa.yml pull
        
        # Stop existing containers
        docker-compose -f docker-compose.qa.yml down
        
        # Deploy new version
        export DOCKER_TAG=${{ needs.determine-environment.outputs.docker_tag }}
        docker-compose -f docker-compose.qa.yml up -d
        
        # Wait for containers to be ready
        sleep 30
    
    - name: Database Migration
      run: |
        echo "📊 Running database migrations..."
        docker-compose -f docker-compose.qa.yml exec -T web python manage.py migrate --noinput
    
    - name: Collect Static Files
      run: |
        echo "📁 Collecting static files..."
        docker-compose -f docker-compose.qa.yml exec -T web python manage.py collectstatic --noinput
    
    - name: Run Tests
      run: |
        echo "🧪 Running automated tests..."
        docker-compose -f docker-compose.qa.yml exec -T web python manage.py test --keepdb
    
    - name: Health Check
      run: |
        echo "🏥 Performing post-deployment health check..."
        for i in {1..10}; do
          if curl -f http://qa.educore-lms.com/health/; then
            echo "✅ QA deployment successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "❌ Health check failed after 10 attempts"
        exit 1
    
    - name: Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ QA deployment completed successfully"
          echo "🔗 URL: http://qa.educore-lms.com"
          echo "🏷️ Tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        else
          echo "❌ QA deployment failed"
        fi

  # Deploy to UAT (staging and releaseTest branches)
  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/releaseTest') && github.event_name == 'push'
    environment:
      name: uat
      url: http://uat.educore-lms.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Pre-deployment Backup
      run: |
        echo "💾 Creating pre-deployment backup..."
        # Create database backup
        docker-compose -f docker-compose.uat.yml exec -T db pg_dump -U postgres educore_lms > backup_$(date +%Y%m%d_%H%M%S).sql
        
        # Backup static files
        tar -czf static_backup_$(date +%Y%m%d_%H%M%S).tar.gz static/
    
    - name: Pre-deployment Health Check
      run: |
        echo "🔍 Performing pre-deployment health check..."
        curl -f http://uat.educore-lms.com/health/ || echo "Previous deployment not accessible"
    
    - name: Deploy to UAT
      run: |
        echo "🚀 Deploying to UAT environment..."
        echo "Using docker tag: uat"
        
        # Pull latest images
        docker-compose -f docker-compose.uat.yml pull
        
        # Stop existing containers gracefully
        docker-compose -f docker-compose.uat.yml stop
        
        # Deploy new version
        export DOCKER_TAG=uat
        docker-compose -f docker-compose.uat.yml up -d
        
        # Wait for containers to be ready
        sleep 45
    
    - name: Database Migration
      run: |
        echo "📊 Running database migrations..."
        docker-compose -f docker-compose.uat.yml exec -T web python manage.py migrate --noinput
    
    - name: Collect Static Files
      run: |
        echo "📁 Collecting static files..."
        docker-compose -f docker-compose.uat.yml exec -T web python manage.py collectstatic --noinput
    
    - name: Load Test Data
      run: |
        echo "📋 Loading test data fixtures..."
        docker-compose -f docker-compose.uat.yml exec -T web python manage.py loaddata test_data.json || echo "No test data fixtures found"
    
    - name: Run Integration Tests
      run: |
        echo "🧪 Running integration tests..."
        docker-compose -f docker-compose.uat.yml exec -T web python manage.py test --tag=integration --keepdb
    
    - name: Performance Test
      run: |
        echo "⚡ Running basic performance tests..."
        # Simple load test
        for i in {1..5}; do
          curl -w "Response time: %{time_total}s\n" -o /dev/null -s http://uat.educore-lms.com/
        done
    
    - name: Health Check
      run: |
        echo "🏥 Performing comprehensive health check..."
        for i in {1..15}; do
          if curl -f http://uat.educore-lms.com/health/; then
            echo "✅ UAT deployment successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "❌ Health check failed after 15 attempts"
        exit 1
    
    - name: Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ UAT deployment completed successfully"
          echo "🔗 URL: http://uat.educore-lms.com"
          echo "🏷️ Tag: uat"
          echo "📊 Ready for user acceptance testing"
        else
          echo "❌ UAT deployment failed"
          echo "🔄 Consider rollback if necessary"
        fi

  # Deploy to Production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, determine-environment]
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://educore-lms.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Pre-deployment Backup
      run: |
        echo "💾 Creating comprehensive production backup..."
        # Create timestamped database backup
        BACKUP_TIME=$(date +%Y%m%d_%H%M%S)
        docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U postgres educore_lms > backup_prod_${BACKUP_TIME}.sql
        
        # Backup static files and media
        tar -czf static_backup_prod_${BACKUP_TIME}.tar.gz static/ media/
        
        # Store backup location for potential rollback
        echo "BACKUP_FILE=backup_prod_${BACKUP_TIME}.sql" >> $GITHUB_ENV
    
    - name: Pre-deployment Validation
      run: |
        echo "🔍 Performing pre-deployment validation..."
        # Check current production health
        curl -f https://educore-lms.com/health/ || echo "Production health check failed"
        
        # Validate Docker image exists
        docker pull educore-lms:${{ needs.determine-environment.outputs.docker_tag }}
    
    - name: Blue-Green Deployment Setup
      run: |
        echo "🔄 Setting up blue-green deployment..."
        # Create green environment
        export DOCKER_TAG=${{ needs.determine-environment.outputs.docker_tag }}
        export COMPOSE_PROJECT_NAME=educore_green
        
        # Deploy to green environment on alternate ports
        docker-compose -f docker-compose.green.yml up -d
        
        # Wait for green environment to be ready
        sleep 60
    
    - name: Green Environment Testing
      run: |
        echo "🧪 Testing green environment..."
        # Health check on green environment
        for i in {1..10}; do
          if curl -f http://localhost:8001/health/; then
            echo "✅ Green environment is healthy"
            break
          fi
          echo "Attempt $i failed, retrying in 15 seconds..."
          sleep 15
        done
        
        # Run smoke tests
        curl -f http://localhost:8001/api/health/
        curl -f http://localhost:8001/admin/login/
    
    - name: Database Migration (Green)
      run: |
        echo "📊 Running database migrations on green environment..."
        export COMPOSE_PROJECT_NAME=educore_green
        docker-compose -f docker-compose.green.yml exec -T web python manage.py migrate --noinput
    
    - name: Production Deployment (Blue-Green Switch)
      run: |
        echo "🚀 Switching to green environment (Production deployment)..."
        echo "Using docker tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        
        # Update production environment
        export DOCKER_TAG=${{ needs.determine-environment.outputs.docker_tag }}
        
        # Graceful shutdown of blue environment
        docker-compose -f docker-compose.prod.yml stop
        
        # Start new production environment
        docker-compose -f docker-compose.prod.yml up -d
        
        # Wait for production to be ready
        sleep 45
    
    - name: Post-deployment Database Tasks
      run: |
        echo "📊 Running post-deployment database tasks..."
        docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate --noinput
        docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput
        
        # Clear cache
        docker-compose -f docker-compose.prod.yml exec -T web python manage.py clear_cache || echo "No cache clearing command available"
    
    - name: Production Health Check
      run: |
        echo "🏥 Performing comprehensive production health check..."
        for i in {1..20}; do
          if curl -f https://educore-lms.com/health/; then
            echo "✅ Production deployment successful!"
            # Clean up green environment
            export COMPOSE_PROJECT_NAME=educore_green
            docker-compose -f docker-compose.green.yml down
            exit 0
          fi
          echo "Attempt $i failed, retrying in 15 seconds..."
          sleep 15
        done
        echo "❌ Production health check failed after 20 attempts"
        exit 1
    
    - name: Production Smoke Tests
      run: |
        echo "🔥 Running production smoke tests..."
        # Test critical endpoints
        curl -f https://educore-lms.com/api/health/
        curl -f https://educore-lms.com/admin/login/
        curl -f https://educore-lms.com/courses/
        
        # Test database connectivity
        docker-compose -f docker-compose.prod.yml exec -T web python manage.py check --database default
    
    - name: Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 PRODUCTION DEPLOYMENT SUCCESSFUL!"
          echo "🔗 URL: https://educore-lms.com"
          echo "🏷️ Tag: ${{ needs.determine-environment.outputs.docker_tag }}"
          echo "📅 Deployed: $(date)"
          echo "✅ All systems operational"
        else
          echo "❌ PRODUCTION DEPLOYMENT FAILED!"
          echo "🚨 IMMEDIATE ATTENTION REQUIRED"
          echo "🔄 Consider immediate rollback using backup: $BACKUP_FILE"
        fi
    
    - name: Rollback on Failure
      if: failure()
      run: |
        echo "🔄 Initiating automatic rollback..."
        # Restore from backup if deployment failed
        docker-compose -f docker-compose.prod.yml down
        
        # Restore database
        if [ -f "$BACKUP_FILE" ]; then
          docker-compose -f docker-compose.prod.yml exec -T db psql -U postgres -d educore_lms < "$BACKUP_FILE"
        fi
        
        # Restart with previous version
         docker-compose -f docker-compose.prod.yml up -d
         echo "⚠️ Rollback completed - manual verification required"

  # Deploy to Development (fallback environment)
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, determine-environment]
    if: needs.determine-environment.outputs.environment == 'development'
    environment:
      name: development
      url: https://dev.educore-lms.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Development
      run: |
        echo "🔧 Deploying to Development environment (fallback)..."
        echo "Using docker tag: ${{ needs.determine-environment.outputs.docker_tag }}"
        
        # Pull and deploy to development
        docker-compose -f docker-compose.dev.yml pull
        docker-compose -f docker-compose.dev.yml down
        
        export DOCKER_TAG=${{ needs.determine-environment.outputs.docker_tag }}
        docker-compose -f docker-compose.dev.yml up -d
        
        # Wait for services to start
        sleep 30
        
        # Run basic setup
        docker-compose -f docker-compose.dev.yml exec -T web python manage.py migrate --noinput
        docker-compose -f docker-compose.dev.yml exec -T web python manage.py collectstatic --noinput
        
        # Basic health check
        curl -f https://dev.educore-lms.com/health/ || echo "Development deployment completed with warnings"
        
        echo "✅ Development deployment completed"
        echo "🔗 URL: https://dev.educore-lms.com"
    
    - name: Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **Docker Image:**
          `${{ needs.build.outputs.image-tag }}`
        draft: false
        prerelease: false

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Deployment to Production successful!"
        # Add Slack/Teams/Email notification here
    
    - name: Notify on Failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment to Production failed!"
        # Add failure notification here