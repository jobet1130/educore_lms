name: Security Monitoring

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  # Vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run Bandit security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  # Docker image security scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: educore-lms:security-scan
        cache-from: type=gha
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'educore-lms:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report-${{ github.run_number }}
        path: licenses.json
        retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # TruffleHog requires different base commits to avoid "BASE and HEAD commits are the same" error
    # For push events: use the previous commit (github.event.before) if available
    # For scheduled/manual runs: scan last 10 commits to catch recent changes
    # Skip scanning if this is the initial commit (all zeros)
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000' && github.event.before || 'HEAD~10' }}
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true
    
    # Fallback: scan entire repository if commit-based scan fails
    - name: Run TruffleHog OSS (Filesystem Scan)
      if: failure()
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified --no-git

  # Infrastructure as Code security
  iac-security:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Security notification
  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, docker-security, license-check, secret-scan, iac-security]
    if: always() && (needs.vulnerability-scan.result == 'failure' || needs.docker-security.result == 'failure' || needs.secret-scan.result == 'failure')
    
    steps:
    - name: Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `ðŸš¨ Security Alert - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Security Scan Results
          
          **Workflow Run:** ${{ github.run_id }}
          **Triggered by:** ${{ github.event_name }}
          **Branch:** ${{ github.ref_name }}
          
          ### Failed Checks:
          - Vulnerability Scan: ${{ needs.vulnerability-scan.result }}
          - Docker Security: ${{ needs.docker-security.result }}
          - Secret Scan: ${{ needs.secret-scan.result }}
          
          Please review the security reports and take appropriate action.
          
          **Action Required:**
          1. Review the security scan artifacts
          2. Address any critical vulnerabilities
          3. Update dependencies if necessary
          4. Close this issue once resolved
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'high-priority']
          });

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, docker-security, license-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary - $(date)" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> security-summary.md
        echo "- Docker Security: ${{ needs.docker-security.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- IaC Security: ${{ needs.iac-security.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Artifacts" >> security-summary.md
        echo "Security reports are available in the workflow artifacts." >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-${{ github.run_number }}
        path: security-summary.md
        retention-days: 90